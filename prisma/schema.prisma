datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    ADMIN
    EDITOR
    INSTRUCTOR
}

model Users {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    username         String    @unique
    email            String    @unique
    hashedPassword   String
    fullName         String?
    avatar           String?
    bio              String?
    role             UserRole? @default(USER)
    emailVerified    Boolean?  @default(false)
    emailToken       String    @unique
    emailTokenExpiry DateTime
    refreshToken     String?
    resetToken       String?   @unique
    resetTokenExpiry DateTime?
    captchaToken     String?
    loginAttempts    Int       @default(0)
    lockoutUntil     DateTime?
    lastLogin        DateTime  @default(now())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    Posts            Posts[]

    @@map("users")
}

model LoginActivity {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    timestamp DateTime @default(now())
    ipAddress String?
    userAgent String?
    result    String // e.g., 'Success', 'Failed', 'Account Locked'
    reason    String? // e.g., 'Incorrect Password', 'Account not verified'
    location  String?
    sessionId String?

    @@map("login_activities")
}

model Tags {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    posts     PostTags[] @relation("TagToPosts")

    @@map("tags")
}

model Categories {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    posts     Posts[] // One-to-many relation with Posts

    @@map("categories")
}

model Posts {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String     @unique
    description String
    image       String
    authorId    String     @db.ObjectId
    author      Users      @relation(fields: [authorId], references: [id])
    categoryId  String     @db.ObjectId
    category    Categories @relation(fields: [categoryId], references: [id])
    tags        PostTags[] @relation("PostToTags")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@map("posts")
}

model PostTags {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    postId String @db.ObjectId
    post   Posts  @relation(fields: [postId], references: [id], name: "PostToTags")
    tagId  String @db.ObjectId
    tag    Tags   @relation(fields: [tagId], references: [id], name: "TagToPosts")

    @@unique([postId, tagId])
    @@map("postTags")
}
